require 'pathname'
require 'nokogiri'
require_relative 'generate_methods'
require_relative 'generate_method_map'
require_relative 'generate_basic_properties'

dest_dir = Pathname(File.absolute_path('../RMQClient', __dir__))
this_dir = Pathname(__dir__)
xml = Nokogiri::XML(File.open(this_dir.join("amqp0-9-1.extended.xml")))

desc "Generate AMQP method code"
task :generate_methods do
  generator = GenerateMethods.new(xml)
  dest_dir.join('AMQMethods.h').write(generator.generate_header)
  dest_dir.join('AMQMethods.m').write(generator.generate_implementation)
end

desc "Generate mapping between [classID, methodID] to method classes"
task :generate_method_map do
  generator = GenerateMethodMap.new(xml)
  dest_dir.join('AMQMethodMap.h').write(generator.generate_header)
  dest_dir.join('AMQMethodMap.m').write(generator.generate_implementation)
end

desc "Generate basic properties"
task :generate_basic_properties do
  generator = GenerateBasicProperties.new(xml)
  dest_dir.join('AMQBasicProperties.h').write(generator.generate_header)
  dest_dir.join('AMQBasicProperties.m').write(generator.generate_implementation)
end

desc "Generate everything (default)"
multitask generate: [:generate_methods, :generate_method_map, :generate_basic_properties]

task default: :generate
