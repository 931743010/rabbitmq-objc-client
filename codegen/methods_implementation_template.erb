@interface <%= class_name %> ()
<%- fields.each do |f| -%>
@property (copy, nonatomic, readwrite) <%= f[:type] %> *<%= f[:name] %>;
<%- end -%>
@property (nonatomic, readwrite) NSArray *payloadArguments;
@end

@implementation <%= class_name %>

+ (NSArray *)frames {
    return @[@[<%= fields.map {|f| "[#{f[:type]} class]"}.join(",\n               ") -%>]];
}
- (NSNumber *)classID     { return @<%= class_id %>; }
- (NSNumber *)methodID    { return @<%= method_id %>; }
- (NSNumber *)frameTypeID { return @1; }

<%- if constructor -%>
<%= constructor %> {
    self = [super init];
    if (self) {
        <%- fields.each do |f| -%>
        self.<%= f[:name] %> = <%= f[:name] %>;
        <%- end -%>
        self.payloadArguments = @[<%= fields.map {|f| "self.#{f[:name]}" }.join(",\n                                  ") -%>];
    }
    return self;
}
<%- end -%>

- (instancetype)initWithDecodedFrames:(NSArray *)frames {
    self = [super init];
    if (self) {
      <%- fields.each_with_index do |f, idx| -%>
        self.<%= f[:name] %> = frames[0][<%= idx %>];
      <%- end -%>
        self.payloadArguments = @[<%= fields.map {|f| "self.#{f[:name]}" }.join(",\n                                  ") -%>];
    }
    return self;
}

- (NSData *)amqEncoded {
    NSMutableData *encoded = [NSMutableData new];
    [encoded appendData:[[AMQShort alloc] init:self.classID.integerValue].amqEncoded];
    [encoded appendData:[[AMQShort alloc] init:self.methodID.integerValue].amqEncoded];
    for (id<AMQEncoding>arg in self.payloadArguments) {
        [encoded appendData:arg.amqEncoded];
    }
    return encoded;
}

@end

