#!/usr/bin/env ruby

require 'nokogiri'
require 'active_support/inflector'
require 'erb'

def type_for_domain(xml, domain)
  domain = xml.xpath("/amqp/domain[@name='#{domain}']").first
  if domain
    domain[:type]
  else
    ""
  end
end

def from_this_dir(path)
  File.absolute_path(path, __dir__)
end

File.open(from_this_dir("amqp0-9-1.extended.xml")) do |f|
  xml = Nokogiri::XML(f)
  template = ERB.new(File.read(from_this_dir('template.erb')), nil, '-')

  puts <<-OBJC
// This file is generated by codegen/transform.rb. Do not edit.
#import <Foundation/Foundation.h>
@import Mantle;
#import "AMQProtocolValues.h"

  OBJC

  xml.xpath("/amqp/class").each do |klass|
    class_name = klass[:name].capitalize
    klass.xpath("method").each do |method|
      method_name = method[:name].underscore.classify
      fields = method.xpath('field').map { |f|
        type = if f[:domain]
                 type_for_domain(xml, f[:domain]).underscore.camelize
               else
                 f[:type].underscore.camelize
               end
        {
          type: type,
          name: f[:name].underscore.camelize(:lower),
        }
      }
      puts template.result(binding)
    end
  end
end
